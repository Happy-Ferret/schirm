#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import argparse
import httplib2
import urlparse
import urllib
import select

import BeautifulSoup
import schirmclient as schirm

html = """
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
</head>
<body>
    <iframe src="%(url)s" style="border:0px;width:100%%;height:500px;"></iframe>
</body>
</html>
"""

def noscript(html_string):
    soup = BeautifulSoup.BeautifulSoup(html_string)
    for script in soup.findAll('script'):
        script.extract()
    for noscript in soup.findAll('noscript'):
        noscript.replaceWith("".join(map(str, noscript.contents)))
    return soup

# <script>
# window.onload = function() {
#     window.location="%(url)s"
# };
# </script>

def get(url):
    h = httplib2.Http() #".cache"
    return h.request(url, "GET")

def proxy_request(req):
    res, body = get(req.path)
    msg = ["HTTP/1.1 200 OK", "Cache-Control: no-cache"]
    allowed_hdrs = set({"content-type",})
    for k,v in res.iteritems():
        if k in allowed_hdrs:
            msg.append(k + ": " + v)
    msg.append("")
    if 'html' in res.get('content-type'):
        msg.append(str(noscript(body)))
    else:
        msg.append(body)
    schirm.respond(req.id, "\r\n".join(msg))

def prepend_http(url):
    if url.startswith("http://"):
        return url
    else:
        return "http://" + url

def query_params(arglist):
    if arglist:
        return "?" + urllib.urlencode([tuple(a.split("=")) for a in arglist if "=" in a])
    else:
        return ""

def main(args):
    url = prepend_http(args.url) + query_params(args.params)
    loc = urlparse.urlparse(url)[1]
    try:
        with schirm.frame():
            print html % {'url':url}
            schirm.close()
            while True:
                req = schirm.read_next()
                schirm.debug(req.method, req.path)
                if req.method == "GET":
                    proxy_request(req)
    except KeyboardInterrupt:
        pass

    return

def parse_args():
    parser = argparse.ArgumentParser(description="Get and display the result", epilog="Example:\nschirmget www.wikipedia.org/redirect-search.php search=schirm language=en")
    parser.add_argument("url", metavar="URL", type=str)
    parser.add_argument("params", metavar="PARAMETER", type=str, nargs="*")
    args = parser.parse_args()
    return args

if __name__ == '__main__':
    main(parse_args())

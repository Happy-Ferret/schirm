#!/usr/bin/env python

import sys
import os
import cgi
import MySQLdb as mysql
import schirmclient
import optparse
import readline
import atexit

css = """
body {
  margin:0px; width:100%;
}

table {
    border-spacing: 0px;
    background: none repeat scroll 0 0 #FFFFFF;
    border-collapse: collapse;
    font-family: "Lucida Sans Unicode","Lucida Grande",Sans-Serif;
    font-size: 12px;
    margin: 4px;
    text-align: left;
}
table th {
    border-bottom: 2px solid #6678B1;
    color: #003399;
    font-size: 14px;
    font-weight: normal;
    padding: 5px 4px;
}
table td {
    color: #666699;
    padding: 9px 8px 0;
}
table tbody tr:hover td {
    color: #000088;
    background-color: #c9c9f0;
}

table tr.alt-row {
    background-color: #e0e0f0;
}
"""

def print_table(columns, rows, max_rows=25):
    head = """
    <html>
      <head>
        <style type="text/css">
          {css}
        </style>
      </head>
      <body>
        <table>
          <thead>
            <tr>
              {header}
            </tr>
          </thead>
          <tbody>
    """
    foot = """
          </tbody>
        </table>
      <em>{info}</em>
      </body>
    </html>
    """
    def print_row(row, classes=[]):
        print '<tr class="{}">'.format(" ".join(classes))
        for col in row:
            print "<td>{}</td>".format(cgi.escape(str(col)))
        print "</tr>"
    
    with schirmclient.frame():
        print head.format(header="".join(map("<th>{}</th>".format, map(cgi.escape, columns))),
                          css=css)
        alt_row = False
        for r in rows[:max_rows]:
            print_row(r, ['alt-row'] if alt_row else [])
            alt_row = not alt_row
        if len(rows) > max_rows:
            print foot.format(info='... {} more rows (total: {} rows)'.format(len(rows) - max_rows, len(rows)))
        else:
            print foot.format(info='{} rows'.format(len(rows)))

def print_exc(e):
    tmpl = """
    <html><head>
    <style type="text/css">
      body {{ margin:0px; width:100%; }}
      div {{color: #ff0000}}
    </style>
    </head>
    <body>
    <div>{}</div>
    </body>
    </html>"""
    with schirmclient.frame():
        if isinstance(e, (mysql.Error, mysql.Warning)):
            print tmpl.format(e.args[1])
        else:
            print tmpl.format(str(e))

def print_info(msg):
    tmpl = """
    <html><head>
    <style type="text/css">
      body {{ margin:0px; width:100%; }}
    </style>
    </head>
    <body>
    <em>{}</em>
    </body>
    </html>"""
    with schirmclient.frame():
        print tmpl.format(msg)

def main(args):
    conn = mysql.connect(host='localhost', user=args.user, passwd=args.password);
    cur = conn.cursor()

    histfile = os.path.join(os.path.expanduser("~"), ".pyhist")
    try:
        readline.read_history_file(histfile)
    except IOError:
        pass
    atexit.register(readline.write_history_file, histfile)

    while 1:
        try:
            stmt = raw_input('smysql> ')
        except KeyboardInterrupt:
            print
            sys.exit(0)
        try:
            cur.execute(stmt)
            rows = cur.fetchall()
            if rows:
                print_table([d[0] for d in (cur.description or [])], rows)
            else:
                print_info('empty')
        except Exception, e:
            print_exc(e)

def parse_args():
    p = optparse.OptionParser()
    p.add_option('-u', '--user')
    p.add_option('-p', '--password')
    p.add_option('-D', '--database')
    args, pos = p.parse_args()
    return args

if __name__ == '__main__':
    main(parse_args())

